# https://github.com/actions/starter-workflows/blob/main/ci/docker-image.yml

name: Docker Image CICD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:

  test:

    runs-on: self-hosted
    steps:

    - name: Checkout latest commit
      uses: actions/checkout@v2
      with:
        clean: false

    - name: Create dependencies list
      run:
        pip freeze | grep -v "pkg_resources" > requirements.txt

    - name: Install Dependencies
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt

    # https://blog.healthchecks.io/2020/11/using-github-actions-to-run-django-tests/
    - name: Test
      env:
        SECRET_KEY: "{{ secrets.SECRET_KEY }}"
      run: |      
        python3 -m manage test

    # https://docs.djangoproject.com/it/4.0/topics/testing/advanced/#integration-with-coverage-py
    - name: Tests code coverage
      env:
        MINIMUM_COVERAGE: 20
      run: |
        coverage run --omit='*/venv/*' manage.py test
        coverage json
        CURRENT_COVERAGE=$(cat coverage.json | jq -r '.totals.percent_covered_display')
        if [ $CURRENT_COVERAGE -lt $MINIMUM_COVERAGE ]; then
          echo "Current code coverage ($CURRENT_COVERAGE%) is below the minimum acceptable threshold ($MINIMUM_COVERAGE%)"
          exit 1
        fi

  build:

    needs: test
    runs-on: self-hosted

    steps:
    # Update version in core/__init__.py and save it in variable for the workflow
    # Requires the dev repo to coincide with the workflow repo
    - name: Update version
      id: update-version
      run: |
        chmod +x "${GITHUB_WORKSPACE}/.github/update-version.sh"
        "${GITHUB_WORKSPACE}/.github/update-version.sh"
        echo "::set-output name=new-version::$(cat ${GITHUB_WORKSPACE}/core/__init__.py | grep '__version__ = ' | cut -d"'" -f2)"

    # Get current date to use in the docker image tag
    - name: Get current date
      id: date
      run: echo "::set-output name=date::$(date +'%Y%m%d-%H%M')"

    # Remove the older versions of the image
    - name: Find older images
      id: clean-images
      run: |
        chmod +x "${GITHUB_WORKSPACE}/.github/clean-images.sh"
        "${GITHUB_WORKSPACE}/.github/clean-images.sh"

    # Build the latest docker image
    - name: Build the Docker image
      run: |
        docker build . --tag hotline
        docker tag hotline sannae/hotline:${{ steps.update-version.outputs.new-version }}${{ steps.date.outputs.date }}
        docker tag hotline sannae/hotline:latest

  deploy:

    needs: build
    runs-on: self-hosted

    steps:

    # Prepare for deployment
    # https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/
    - name: Deploy check
      run: |
        python3 -m manage check --deploy 
      # Add --fail-level WARNING after --deploy to stop deployment even with warnings 

    # Push the image to the registry
    - name: Push to DockerHub registry
      run: |
        docker logout
        docker login --username=${{ secrets.DOCKERHUB_USERNAME }} --password=${{ secrets.DOCKERHUB_PASSWORD }}
        docker push --all-tags ${{ secrets.DOCKERHUB_USERNAME }}/hotline

    # Remove the local image
    - name: Clean up locally
      run: |
        docker rmi hotline
        docker rmi sannae/hotline

    - name: Clean up remotely
      run: |
        echo "delete the oldest tags on the Docker Hub registry"

    # Connect to demo db and publish to Azure App Services

    # Reset env for development
