# https://github.com/actions/starter-workflows/blob/main/ci/docker-image.yml

name: Docker Image CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:

  test:
    runs-on: self-hosted
    steps:
    # Checkout the repo
    - uses: actions/checkout@v2
      with:
        clean: false
    # https://blog.healthchecks.io/2020/11/using-github-actions-to-run-django-tests/
    - name: Test
      run: |
        python3 -m manage test
    # https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/
    - name: Deploy check
      run: |
        python3 -m manage check ---deploy

  build:
    needs: test
    runs-on: self-hosted

    steps:
    # Update version in core/__init__.py and save it in variable for the workflow
    # Requires the dev repo to coincide with the workflow repo
    - name: Update version
      id: update-version
      run: |
        chmod +x "${GITHUB_WORKSPACE}/.github/update-version.sh"
        "${GITHUB_WORKSPACE}/.github/update-version.sh"
        echo "::set-output name=new-version::$(cat ${GITHUB_WORKSPACE}/core/__init__.py | grep '__version__ = ' | cut -d"'" -f2)"

    # Get current date to use in the docker image tag
    - name: Get current date
      id: date
      run: echo "::set-output name=date::$(date +'%Y%m%d-%H%M')"

    # Remove the older versions of the image
    - name: Find older images
      id: clean-images
      run: |
        chmod +x "${GITHUB_WORKSPACE}/.github/clean-images.sh"
        "${GITHUB_WORKSPACE}/.github/clean-images.sh"

    # Build the latest docker image
    - name: Build the Docker image
      run: |
        docker build . --tag hotline
        docker tag hotline sannae/hotline:${{ steps.update-version.outputs.new-version }}-${{ steps.date.outputs.date }}
        docker tag hotline sannae/hotline:latest

  deploy:
    needs: build
    runs-on: self-hosted

    steps:

    # Prepare for production

    # Push the image to the registry
    - name: Push to DockerHub registry
      
      run: |
        docker logout
        docker login --username=${{ secrets.DOCKERHUB_USERNAME }} --password=${{ secrets.DOCKERHUB_PASSWORD }}
        docker push --all-tags ${{ secrets.DOCKERHUB_USERNAME }}/hotline

    # Remove the local image

    # Publish to Azure App Services

    # Reset env for development
